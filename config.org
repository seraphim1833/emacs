IC XS  +  NI KA
#+TITLE: Configuración de Emacs
#+AUTHOR: Martín Buenahora
#+STARTUP: showeverything
#+OPTIONS: toc:2


* Funcionalidad
** Inicializar el gestor de paquetes de Emacs
#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
      (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

** Iniciar en Scratch, con modo org
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-major-mode 'org-mode)
#+END_SRC

** Manejo de archivos
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1) ;; Guardar historial de archivos
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files) ;; Atajo para abrir archivos recientes
#+END_SRC

** Mejor manejo de correcciones (/undo/-/redo/)
#+BEGIN_SRC emacs-lisp
;;	  (use-package undo-tree
;;	    :ensure 1
;;	    :config
;;	    (global-undo-tree-mode 1)
;;	     )
#+END_SRC

** Otros
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t) ;; Cerrar automáticamente los paréntesis etc
#+END_SRC

* Interfaz
** Navegación fluida
#+BEGIN_SRC emacs-lisp
  ;;(package-vc-install '(ultra-scroll :vc-backend Git :url  "https://github.com/jdtsmith/ultra-scroll"))
  (use-package ultra-scroll
					  ;:load-path "~/code/emacs/ultra-scroll" ; if you git clone'd instead of package-vc-install
    :init
    (setq scroll-conservatively 101 ; important!
	  scroll-margin 0) 
    :config
    (ultra-scroll-mode 1))
#+END_SRC

** Tipografías/Fuentes
#+BEGIN_SRC emacs-lisp
	;;(custom-theme-set-faces
  (set-face-attribute 'default nil :family "GoMono Nerd Font Mono" :height 180)
  (set-face-attribute 'variable-pitch nil :family "EB Garamond" :height 1.25)
  (set-face-attribute 'fixed-pitch nil :family "GoMono Nerd Font Mono" :height 180)
	 ;;'user
      ;;   '(default ((t ( :family "GoMono Nerd Font Mono" :height 160))))
    ;;     '(variable-pitch ((t (:family "EB Garamond" :height 1.25))))
  ;;       '(fixed-pitch ((t (:family "GoMono Nerd Font Mono" :height 160))))
  ;;       '(mode-line ((t (:height 160))))
  ;;       )
	;;(setq-default line-spacing 15)
	;;  (add-text-properties (point-min) (point-max)
	;;                   '(line-spacing 0.25 line-height 1.25))
	;;(setq default-text-properties '(line-spacing 0.25 line-height 1.25))
#+END_SRC

** Tema: Catpuccin
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
  (use-package catppuccin-theme)
  (load-theme 'catppuccin :no-confirm)
  (setq catppuccin-flavor 'latte) ;; or 'latte, 'macchiato, or 'mocha
  (catppuccin-reload)
  ;;(use-package spacemacs-theme)
  ;;(load-theme 'spacemacs-light)
#+END_SRC

** DOOM-modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)
	     )
    )
  (setq doom-modeline-buffer-modification-icon nil)
  (setq doom-modeline-time-icon t)
  (setq doom-modeline-enable-word-count t)
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
  (setq mode-line-right-align-edge 'right-fringe)
  (line-number-mode 0)
#+END_SRC

** Limpiar la interfaz
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (setq server-client-instructions nil)
  (setq frame-inhibit-implied-resize t)
  (setq-default cursor-type '(bar . 3))
#+END_SRC

** Modo escritura
#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column)
  (setq-default visual-fill-column-center-text t)
  (setq visual-fill-column-enable-sensible-window-split t)
  (use-package adaptive-wrap)
#+END_SRC


* Org-mode
** Esconder elementos innecesarios
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC

** Modificaciones a la tipografía
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets)
  (setq-default org-pretty-entities t
		org-use-sub-superscripts "{}"
		org-startup-with-inline-images t
		org-image-actual-width '(300)
		)
  ;;(font-lock-add-keywords 'org-mode
                          ;;'(("^ *\\([-]\\) "
                             ;;(0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (use-package org-appear
    :hook
    (org-mode . org-appear-mode))
  (setq org-ellipsis "☜")
  ;;      (add-hook 'org-mode-hook
  ;;		(lambda ()
;;  (setq default-text-properties '(line-spacing 0.25 line-height 1.25))
  ;;		  (setq line-spacing 0.25)
  ;;		  (setq default-text-properties line-height 1.25))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-faces
    :ensure nil
    :custom-face
    ;;(org-indent ((nil (:inherit (org-hide fixed-pitch)))))
    ;;(org-block ((nil (:inherit fixed-pitch :foreground nil))))
    (org-checkbox ((nil (:inherit fixed-pitch))))
    (org-block ((nil (:inherit (fixed-pitch) :height 0.8))))
    (org-code ((nil (:inherit (shadow fixed-pitch)))))
    (org-indent ((nil (:inherit (org-hide fixed-pitch)))))
    (org-meta-line ((nil (:inherit (font-lock-comment-face fixed-pitch)))))
    (org-property-value ((nil (:inherit fixed-pitch))))
    (org-special-keyword ((nil (:inherit (font-lock-comment-face fixed-pitch)))))
    (org-table ((nil (:inherit fixed-pitch :foreground "#83a598" :height 0.8))))
    (org-tag ((nil (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
    (org-verbatim ((nil (:inherit (shadow fixed-pitch)))))
    (org-block-begin-line ((nil (:inherit fixed-pitch :height 0.8))))
    (org-block-end-line ((nil (:inherit fixed-pitch :height 0.8))))
    (org-list-dt ((nil (:inhetir fixed-pitch))))

    (org-level-8 ((nil (:family "Cormorant SC"))))
    (org-level-7 ((nil (:family "Cormorant SC"))))
    (org-level-6 ((nil (:family "Cormorant SC"))))
    (org-level-5 ((nil (:family "Cormorant SC"))))
    (org-level-4 ((nil (:family "Cormorant SC"))))
    (org-level-3 ((nil (:family "Cormorant SC" :height 1.1))))
    (org-level-2 ((nil (:family "Cormorant SC" :height 1.25))))
    (org-level-1 ((nil (:family "Cormorant SC" :weight black :height 1.7))))
    (org-document-title ((nil (:family "Cormorant SC" :weight black :height 2.0 :underline nil))))
    (org-document-author ((nil (:family "Cormorant SC" :weight black :underline nil))))
    )
#+END_SRC

** Exportar
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal)
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")

#+END_SRC
** Hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (add-hook 'org-mode-hook 'org-bullets-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'adaptive-wrap-prefix-mode)
  (add-hook 'org-mode-hook 'visual-fill-column-mode)
#+END_SRC

* AUCTeX
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :ensure t
    :defer t)
#+END_SRC
